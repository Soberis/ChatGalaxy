# Backend CI/CD - FastAPI + Python 3.11+ + Supabase
# 2025年标准的后端测试、安全扫描和代码质量检查

name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  # 代码质量和静态分析
  quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy bandit safety
        
    - name: Ruff linting (替代flake8和black)
      run: |
        ruff check . --output-format=github
        
    - name: Ruff formatting check
      run: |
        ruff format --check .
        
    - name: MyPy type checking
      run: |
        mypy app --ignore-missing-imports --show-error-codes
        
    - name: Bandit security analysis
      run: |
        bandit -r app -f json -o bandit-report.json
        bandit -r app -f txt
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: backend/bandit-report.json
        
  # 依赖安全扫描
  security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit
        
    - name: Safety dependency scan
      run: |
        safety check --json --output safety-report.json
        safety check
        
    - name: Pip-audit vulnerability scan
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-security-reports
        path: |
          backend/safety-report.json
          backend/pip-audit-report.json
          
  # 单元测试和集成测试
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-mock httpx
        
    - name: Create test environment
      run: |
        cp .env.example .env.test
        echo "ENVIRONMENT=test" >> .env.test
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage-${{ matrix.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: backend/htmlcov/
        
  # API测试和性能测试
  api-test:
    name: API & Performance Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      # 使用PostgreSQL进行集成测试
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust
        
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
      run: |
        echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/testdb" > .env.test
        echo "ENVIRONMENT=test" >> .env.test
        
    - name: Run API integration tests
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
      run: |
        pytest tests/integration/ -v --benchmark-skip
        
    - name: Run performance benchmarks
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark-results.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-benchmarks
        path: backend/benchmark-results.json
        
  # Docker构建测试
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: chatgalaxy-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-backend -p 8000:8000 chatgalaxy-backend:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-backend