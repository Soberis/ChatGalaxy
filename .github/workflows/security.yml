# ChatGalaxy Security Scanning - Simplified
# 简化的安全扫描工作流，专注核心安全检查

name: Security Scanning

on:
  schedule:
    - cron: '0 3 * * 1'  # 每周一凌晨3点运行
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.js'
      - '**.ts'
      - '**.vue'
      - '**/requirements.txt'
      - '**/package.json'
  workflow_dispatch:

env:
  NODE_VERSION: '20.19.0'
  PYTHON_VERSION: '3.11'

jobs:
  # 统一安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Frontend dependency audit
      run: |
        cd frontend
        npm install --package-lock-only
        echo "## Frontend Security Audit" >> $GITHUB_STEP_SUMMARY
        npm audit --audit-level=moderate || echo "No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
      
    - name: Backend dependency audit
      run: |
        cd backend
        pip install safety
        echo "## Backend Security Audit" >> $GITHUB_STEP_SUMMARY
        safety check || echo "No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
        
    - name: Code security scan
      run: |
        cd backend
        pip install bandit
        echo "## Code Security Scan" >> $GITHUB_STEP_SUMMARY
        bandit -r app -ll || echo "No security issues found" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
          
  # 容器安全扫描（可选）
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
        
    - name: Security summary
      run: |
        echo "## Container Security Summary" >> $GITHUB_STEP_SUMMARY
        echo "Trivy filesystem scan completed" >> $GITHUB_STEP_SUMMARY
        echo "Check logs above for any vulnerabilities" >> $GITHUB_STEP_SUMMARY
          
  # 敏感信息检测
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --only-verified
      continue-on-error: true
        
    - name: Secrets summary
      run: |
        echo "## Secrets Detection Summary" >> $GITHUB_STEP_SUMMARY
        echo "TruffleHog scan completed" >> $GITHUB_STEP_SUMMARY
        echo "Check logs above for any exposed secrets" >> $GITHUB_STEP_SUMMARY
        
  # 安全报告汇总
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [frontend-security, backend-security, container-security, secrets-scan]
    if: always()
    
    steps:
    - name: 下载所有安全报告
      uses: actions/download-artifact@v4
      with:
        path: ./security-reports
        
    - name: 生成安全报告摘要
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Security | ${{ needs.frontend-security.result == 'success' && '✅' || '❌' }} | ${{ needs.frontend-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Security | ${{ needs.backend-security.result == 'success' && '✅' || '❌' }} | ${{ needs.backend-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security | ${{ needs.container-security.result == 'success' && '✅' || '❌' }} | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅' || '❌' }} | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 检查是否有严重安全问题
        CRITICAL_ISSUES=0
        
        if [ "${{ needs.frontend-security.result }}" != "success" ]; then
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
        fi
        
        if [ "${{ needs.backend-security.result }}" != "success" ]; then
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
        fi
        
        if [ "${{ needs.secrets-scan.result }}" != "success" ]; then
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
        fi
        
        if [ $CRITICAL_ISSUES -gt 0 ]; then
          echo "⚠️ **$CRITICAL_ISSUES critical security issues found!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review and fix security vulnerabilities before deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "🎉 **No critical security issues found!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security scans passed successfully." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 上传SARIF到GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: security-reports/
        
    - name: PR安全报告评论
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const frontendStatus = '${{ needs.frontend-security.result }}';
          const backendStatus = '${{ needs.backend-security.result }}';
          const containerStatus = '${{ needs.container-security.result }}';
          const secretsStatus = '${{ needs.secrets-scan.result }}';
          
          let comment = '## 🔒 Security Scan Report\n\n';
          comment += `| Component | Status | Result |\n`;
          comment += `|-----------|--------|--------|\n`;
          comment += `| Frontend Security | ${frontendStatus === 'success' ? '✅' : '❌'} | ${frontendStatus} |\n`;
          comment += `| Backend Security | ${backendStatus === 'success' ? '✅' : '❌'} | ${backendStatus} |\n`;
          comment += `| Container Security | ${containerStatus === 'success' ? '✅' : '❌'} | ${containerStatus} |\n`;
          comment += `| Secrets Scan | ${secretsStatus === 'success' ? '✅' : '❌'} | ${secretsStatus} |\n\n`;
          
          const criticalIssues = [frontendStatus, backendStatus, secretsStatus].filter(s => s !== 'success').length;
          
          if (criticalIssues > 0) {
            comment += `⚠️ **${criticalIssues} critical security issues found!**\n\n`;
            comment += 'Please review and fix security vulnerabilities before merging.\n\n';
            comment += '📋 **Security Reports Available:**\n';
            comment += '- Check the [Security tab](https://github.com/${{ github.repository }}/security) for detailed findings\n';
            comment += '- Download security reports from the workflow artifacts\n';
          } else {
            comment += '🎉 **All security scans passed successfully!**\n\n';
            comment += 'No critical security issues found. Safe to merge.\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });